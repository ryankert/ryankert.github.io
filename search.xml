<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>my Goals in 2022</title>
    <url>/2022/09/05/2022-annually-goals/</url>
    <content><![CDATA[<p>Time flows fast, couldn’t resist.</p>
<p>Anyways, I find out I only have half of year left (5 monthes), so Imma going to set up some sort of goals that I can look up as days passes.</p>
<h2 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h2><ol>
<li>Leetcode Ratings : 2000 (if can, try to reach the Guardian badge).</li>
<li>CPE programming contest : I think I can acheive 5&#x2F;7 now, so I’ll set a 6 out of 7.</li>
<li>Relatively nice GPAs</li>
<li>Find an intructor and start a project</li>
<li>Create an Fullstack Application</li>
</ol>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>Collect you and your friends&#39; blog posts via blogroll</title>
    <url>/2022/09/01/blogroll-setup/</url>
    <content><![CDATA[<h1 id="Build-an-Blogroll-on-Hexo-Next"><a href="#Build-an-Blogroll-on-Hexo-Next" class="headerlink" title="Build an Blogroll on Hexo Next"></a>Build an Blogroll on Hexo Next</h1><p>Year ago, I saw many blogger collects their friends blog post via Github Action auto run.<br>Therefore, I always want to try it out.</p>
<p>Anyways, I build it with typescript. Also, if you have any questions or suggestions, any issues or prs are welcomed.</p>
<h2 id="Step1-Generate-useful-Data-from-RSS-feed"><a href="#Step1-Generate-useful-Data-from-RSS-feed" class="headerlink" title="Step1: Generate useful Data from RSS-feed"></a>Step1: Generate useful Data from RSS-feed</h2><p>This project is based on rss feed, so if you or your friend blog doesn’t have <code>/feed</code>, <code>feed.xml</code>, <code>atom.xml</code>, or any kinds of xml file contains your full blogs’ intel, you will have to generate one yourself.</p>
<div class="note info">
            <h4 id="Project-URL"><a href="#Project-URL" class="headerlink" title="Project URL"></a>Project URL</h4><p><a href="https://github.com/ryankert01/rss-friend">https://github.com/ryankert01/rss-friend</a></p>
          </div>

<h3 id="How-to-use-it"><a href="#How-to-use-it" class="headerlink" title="How to use it"></a>How to use it</h3><ol>
<li><p>Fork this repository</p>
</li>
<li><p>install your friends’ rss pages into this file <code>./_data/friends.json</code>, in this format:</p>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ryan&#x27;s Blog&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://blog.ryankert.cc/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;feed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://blog.ryankert.cc/atom.xml&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Until it generate file sussessfully, it will generate a new branch automatically. Then, you setup your github page to display the branch <code>gh-pages</code>.</li>
</ol>
<p>It will be display at <code>https://&lt;github-username&gt;.github.io/rss-friend/&lt;file&gt;</code>.</p>
<p>There are three file generated</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rss.json       // sorted json year, month, day</span><br><span class="line">sorted.json    // sorted json universal date ex:2022-08-22T17:47:35.000Z</span><br><span class="line">unsort.json    // unsort raw data</span><br></pre></td></tr></table></figure>

<h3 id="Auto-Update"><a href="#Auto-Update" class="headerlink" title="Auto Update"></a>Auto Update</h3><p>at (UTC) 1:00 and 13:00</p>
<p>or at (UTC+8) 9:00 and 21:00</p>
<h2 id="Step2-Hexo-settings"><a href="#Step2-Hexo-settings" class="headerlink" title="Step2: Hexo settings"></a>Step2: Hexo settings</h2><h3 id="Setup-blogroll-page"><a href="#Setup-blogroll-page" class="headerlink" title="Setup blogroll page"></a>Setup blogroll page</h3><ol>
<li><p>in <code>./source</code> folder, add <code>blogroll/index.md</code>, change <code>&lt;github_username&gt;</code> to your github username.</p>
<p><strong>index.md</strong></p>
</li>
</ol>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Friends &amp; Blogroll</span><br><span class="line">date: 2022-08-25 22:59:02</span><br><span class="line"><span class="section">comments: false</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">#### Welcome to Friends &amp; blog</span></span><br><span class="line"></span><br><span class="line">This place collects my friends &amp; some of the nice blogs of my select.</span><br><span class="line"></span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;posts_friends&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line">function createElement(elementType, style, link, innerhtml) &#123;</span><br><span class="line">  let elementCreated = document.createElement(elementType);</span><br><span class="line">  elementCreated.href = link;</span><br><span class="line">  elementCreated.innerHTML = innerhtml;</span><br><span class="line">  elementCreated.style = style;</span><br><span class="line">  return elementCreated;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p<span class="emphasis">_f = document.querySelector(&#x27;.posts_</span>friends&#x27;);</span><br><span class="line">const request = &#x27;https://<span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">github_username</span>&gt;</span></span></span></span>.github.io/rss-friend/sorted.json&#x27;;</span><br><span class="line">let d = new Date();</span><br><span class="line">fetch(request)</span><br><span class="line">  .then(response =&gt; response.json()) </span><br><span class="line">  .then(json =&gt; &#123;</span><br><span class="line"><span class="code">    for(let i = 0; i &lt; json.length; i++) &#123;</span></span><br><span class="line"><span class="code">        let currentItem = document.createElement(&#x27;div&#x27;);</span></span><br><span class="line"><span class="code">        d = new Date(json[i].date);</span></span><br><span class="line"><span class="code">        let e;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        // date</span></span><br><span class="line"><span class="code">        let monthAppend = d.getMonth()+1;</span></span><br><span class="line"><span class="code">        monthAppend = monthAppend.toString();</span></span><br><span class="line"><span class="code">        monthAppend = monthAppend.length &lt; 2 ? &quot;0&quot; + monthAppend : monthAppend;</span></span><br><span class="line"><span class="code">        let dayAppend = d.getDate();</span></span><br><span class="line"><span class="code">        dayAppend = dayAppend.toString();</span></span><br><span class="line"><span class="code">        dayAppend = dayAppend.length &lt; 2 ? &quot;0&quot; + dayAppend : dayAppend;</span></span><br><span class="line"><span class="code">        let tempAppend = monthAppend + &quot;-&quot; + dayAppend + &quot; &quot;;</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="code">        let margin = 10;</span></span><br><span class="line"><span class="code">        for (let j = 0; j &lt; tempAppend.length; j++) &#123;</span></span><br><span class="line"><span class="code">          if(tempAppend[j] === &#x27;1&#x27;)</span></span><br><span class="line"><span class="code">            margin += 2;</span></span><br><span class="line"><span class="code">          console.log(margin);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        let style = &quot;border-bottom: none; opacity: 65%; margin: &quot;;</span></span><br><span class="line"><span class="code">        style += margin.toString() + &quot;px&quot;;</span></span><br><span class="line"><span class="code">        e = createElement(</span></span><br><span class="line"><span class="code">          &#x27;a&#x27;,</span></span><br><span class="line"><span class="code">          style, </span></span><br><span class="line"><span class="code">          null, </span></span><br><span class="line"><span class="code">          tempAppend</span></span><br><span class="line"><span class="code">        );</span></span><br><span class="line"><span class="code">        currentItem.appendChild(e);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        // title + link</span></span><br><span class="line"><span class="code">        e = createElement(&#x27;a&#x27;, null, json[i].link, json[i].title);</span></span><br><span class="line"><span class="code">        currentItem.appendChild(e);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line"><span class="code">        // author + link</span></span><br><span class="line"><span class="code">        e = createElement(&#x27;a&#x27;, &quot;opacity: 75%;&quot;, json[i].author.link, json[i].author.name);</span></span><br><span class="line"><span class="code">        e.classList.add(&quot;e-author&quot;);</span></span><br><span class="line"><span class="code">        currentItem.appendChild(e);</span></span><br><span class="line"><span class="code">        p_f.appendChild(currentItem);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">  &#125;) </span></span><br><span class="line"><span class="code">&lt;/script&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span></span></span><br><span class="line">.e-author &#123;</span><br><span class="line">  position: absolute; </span><br><span class="line">  right: 5px;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (max-width: 760px) &#123;</span><br><span class="line">  .e-author &#123;</span><br><span class="line"><span class="code">    position: relative;</span></span><br><span class="line"><span class="code">    left: 15px</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span></span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>in <code>./theme/hexo-theme-next/_config.yml</code>, add Blogroll</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">Blogroll:</span> <span class="string">/blogroll/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-blog</span> <span class="comment"># add</span></span><br></pre></td></tr></table></figure>

<h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p>visit <a href="https://theme-next.js.org/docs/theme-settings/custom-pages.html">Hexo Next Docs</a> or email me : <a href="mailto:&#x72;&#121;&#x61;&#x6e;&#x40;&#x72;&#x79;&#97;&#110;&#107;&#x65;&#114;&#116;&#46;&#x63;&#x63;">&#x72;&#121;&#x61;&#x6e;&#x40;&#x72;&#x79;&#97;&#110;&#107;&#x65;&#114;&#116;&#46;&#x63;&#x63;</a>.</p>
]]></content>
      <categories>
        <category>Web</category>
        <category>Static Website Generator</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Download Google font and use it in offline html</title>
    <url>/2022/04/18/google-font-offline/</url>
    <content><![CDATA[<h2 id="Download-Google-font-and-use-it-in-offline-html"><a href="#Download-Google-font-and-use-it-in-offline-html" class="headerlink" title="Download Google font and use it in offline html"></a>Download Google font and use it in offline html</h2><p><strong>Steps required</strong></p>
<ol>
<li>find your beloved font at google fonts.</li>
<li>select all font styles that you might want to have.</li>
<li>find its’ url ex:<code>https://fonts.googleapis.com/css2?family=Caveat:wght@400;500;600;700&amp;display=swap</code>, which will be in<code>To embed a font, copy the code into the &lt;head&gt; of your html</code>&#x2F;<code>&lt;link&gt;</code></li>
<li>open it in the browser and convert it to <code>example.css</code></li>
<li>make a directory “fonts” ex:<code>mkdir fonts</code></li>
<li>make a <code>main.py</code> in same directory.</li>
<li>paste the automate python code in it.</li>
<li>comfirm that this directory has three object:<ul>
<li><input disabled="" type="checkbox"> <code>main.py</code></li>
<li><input disabled="" type="checkbox"> empty directory <code>fonts</code></li>
<li><input disabled="" type="checkbox"> <code>example.css</code></li>
</ul>
</li>
<li>run the python code <code>python main.py</code></li>
<li>embed <code>example.css</code> in your html file</li>
</ol>
<p><strong><code>main.py</code></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example.css&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = f.read()</span><br><span class="line">    urls = re.findall(<span class="string">r&#x27;(https?://[^\)]+)&#x27;</span>, text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    filename = url.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./fonts/&quot;</span> + filename, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.content)</span><br><span class="line">    text = text.replace(url, <span class="string">&quot;&#x27;./fonts/&quot;</span> + filename +<span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example.css&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(text)</span><br></pre></td></tr></table></figure>

<p>credit: <strong>duydb</strong>, <strong>Wytamma Wirth</strong> and <strong>me</strong> who modified it to the better</p>
<p>resourse: <a href="https://stackoverflow.com/questions/15930003/downloading-a-google-font-and-setting-up-an-offline-site-that-uses-it">https://stackoverflow.com/questions/15930003/downloading-a-google-font-and-setting-up-an-offline-site-that-uses-it</a></p>
]]></content>
      <categories>
        <category>google-font</category>
      </categories>
      <tags>
        <tag>google-font</tag>
      </tags>
  </entry>
  <entry>
    <title>Switching to Hexo!</title>
    <url>/2022/07/13/hello-world/</url>
    <content><![CDATA[<h2 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h2><p>I was priviously using jekyll TeXt theme, but the code block shows too small to watch code. Also, I don’t really understand the coding language jekyll is using, so I decide to switch to a more familier javascript framework, hexo.</p>
<h2 id="What-is-Hexo"><a href="#What-is-Hexo" class="headerlink" title="What is Hexo?"></a>What is Hexo?</h2><p>Hexo is a website generator to generate website based on Markdown file, and it is highly customizable.</p>
<h2 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h2><p>Preriquisite: <code>Git</code> and <code>node.js</code>.</p>
<h2 id="Install-Hexo-CLI"><a href="#Install-Hexo-CLI" class="headerlink" title="Install Hexo CLI"></a>Install Hexo CLI</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>and, we can execute Hexo commands in this way:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx hexo &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Install Starter Package &amp; Dependencies</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>Run these commands, and you will see a starter website is generated by Hexo.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx hexo g</span><br><span class="line">npx hexo s</span><br></pre></td></tr></table></figure>

<h2 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h2><p>In <code>sourse/__post</code> folder, we already have a <code>hello-world.md</code> post that is from Hexo starter package. Basically, we can imitate that first.</p>
<p>For detail Infomation, visit <a href="https://hexo.io/docs/front-matter">Hexo Doc front-matter</a></p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Switching to Hexo!</span><br><span class="line">tags: [Hexo]</span><br><span class="line"><span class="section">categories: [Static Website Generator]</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="section"># header</span></span><br><span class="line"></span><br><span class="line">your blog post</span><br></pre></td></tr></table></figure>

<h2 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h2><p>You can search for theme you like on <a href="https://hexo.io/themes/">This Site</a> or Github, but in hexo, I will generally recommand <code>next</code>. It’s not only because it’s highly customizable, but for its already built nice plugins.</p>
<h2 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h2><p>Use</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx hexo g</span><br></pre></td></tr></table></figure>

<p>It will generate html file that you might want to deploy to github in <code>pulic</code> directory, and you can use Github Pages to handle that.</p>
<p><a href="https://pages.github.com/">Github Pages Tutorial</a></p>
<h2 id="Auto-Deploy-with-Github-Actions"><a href="#Auto-Deploy-with-Github-Actions" class="headerlink" title="Auto Deploy with Github Actions"></a>Auto Deploy with Github Actions</h2><p>Baically, you might find it annoying to generate <code>html</code> file everytime you want to make a change. Github can handle that for me.</p>
<ol>
<li>Uplaod your whole project to Github.</li>
<li>add a file to your repository, <code>.github/workflows/deploy.yml</code></li>
</ol>
<p><strong>.github&#x2F;workflows&#x2F;deploy.yml</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># default branch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">pages:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">16.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;16&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-npm-cache</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">          <span class="attr">cname:</span> <span class="comment"># if you use custom domain, enter your hosting domain for this project.</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Static Website Generator</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>How to setup a typescript Project as fast as possible</title>
    <url>/2022/09/01/setup-ts-project/</url>
    <content><![CDATA[<h1 id="How-to-setup-a-typescript-Project-as-fast-as-possible"><a href="#How-to-setup-a-typescript-Project-as-fast-as-possible" class="headerlink" title="How to setup a typescript Project as fast as possible"></a>How to setup a typescript Project as fast as possible</h1><h2 id="Simply-type-in"><a href="#Simply-type-in" class="headerlink" title="Simply type in"></a>Simply type in</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm gts init</span><br></pre></td></tr></table></figure>

<p>And then, boom, well-done, a well typescript project is initialized, and it’s very nice.</p>
<h2 id="Some-useful-knowledge-about-this-quick-generate"><a href="#Some-useful-knowledge-about-this-quick-generate" class="headerlink" title="Some useful knowledge about this quick generate"></a>Some useful knowledge about this quick generate</h2><p><strong>Compile</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run compile</span><br></pre></td></tr></table></figure>

<p><strong>Run</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node &lt;file_dir&gt;/&lt;file_name&gt;</span><br></pre></td></tr></table></figure>

<p>for more info, check out gts offical <a href="https://github.com/google/gts">documentation</a>.</p>
<h1 id="Or-you-meant-to-start-a-minimal-typescript-project"><a href="#Or-you-meant-to-start-a-minimal-typescript-project" class="headerlink" title="Or you meant to start a minimal typescript project"></a>Or you meant to start a minimal typescript project</h1><p>You can use my minimal typescript project starter</p>
<h2 id="Quick-start"><a href="#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h2><ol>
<li>clone this project</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ryankert01/ts-starter.git</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>initialize</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure>

<h2 id="Scripts"><a href="#Scripts" class="headerlink" title="Scripts"></a>Scripts</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn compile   // compile ts file</span><br><span class="line">yarn dev       // watch ts file</span><br><span class="line">yarn start     // run this project</span><br></pre></td></tr></table></figure>

<h2 id="End-of-story…"><a href="#End-of-story…" class="headerlink" title="End of story…"></a>End of story…</h2>]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>Youtube Thumbnail Scraping</title>
    <url>/2022/04/20/youtube-thumbnail-scraping/</url>
    <content><![CDATA[<p>To crawl thumbnails on YouTube, we use a interesting website that YouTube made for us for quick request for thumnail image.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://i.ytimg.com/vi/&#123;YouTube_video_id&#125;/maxresdefault.jpg</span><br></pre></td></tr></table></figure>

<p>Firstly, we convert YouTube url to id by following code, and use “get” methed request the image.</p>
<p>Then, we stored the image in folder you like<br>using <code>imagedown(YouTube_video_id, &#39;folder_name&#39;)</code></p>
<p>If there’s no such folder, then it will auto generate a new one.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#urls to id</span></span><br><span class="line">url = <span class="string">&quot;YouTube URL&quot;</span></span><br><span class="line">exp = <span class="string">&quot;^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&amp;?]*).*&quot;</span></span><br><span class="line">s = re.findall(exp,url)[<span class="number">0</span>][-<span class="number">1</span>]</span><br><span class="line">thumbnail = <span class="string">f&quot;https://i.ytimg.com/vi/<span class="subst">&#123;s&#125;</span>/maxresdefault.jpg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#image scraping</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imagedown</span>(<span class="params">url, folder</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.mkdir(os.path.join(os.getcwd(), folder))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    os.chdir(os.path.join(os.getcwd(), folder))</span><br><span class="line"></span><br><span class="line">    name = url</span><br><span class="line">    link = url</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;-&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        im = requests.get(link)</span><br><span class="line">        f.write(im.content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Writing: &#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">imagedown(thumbnail, <span class="string">&#x27;image&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>Credits: <a href="https://stackoverflow.com/questions/47730259/installing-urllib-in-python3-6">StackoverFlow</a> and <a href="https://github.com/jhnwr">jhnwr</a></p>
]]></content>
      <categories>
        <category>Scraping</category>
      </categories>
      <tags>
        <tag>Scraping</tag>
      </tags>
  </entry>
  <entry>
    <title>DFS Algorithms</title>
    <url>/2022/12/08/data_structure/dfs/</url>
    <content><![CDATA[<p>DFS, aka. depth-first search, is a nice tool to look data in depth-first manner.<br>an example to travel through graph will be this :</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(Node* u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> u is visited:</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">Visit</span>();</span><br><span class="line">    <span class="function"><span class="keyword">for</span> <span class="title">edges</span><span class="params">(u,v)</span> connect with node:</span></span><br><span class="line"><span class="function">        dfs(v);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h2><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><h4 id="UVA-280-Vertex"><a href="#UVA-280-Vertex" class="headerlink" title="UVA - 280 Vertex"></a>UVA - 280 Vertex</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(x) x.begin(), x.end()</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ver;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> start = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!start)</span><br><span class="line">        vis[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ver[x].<span class="built_in">size</span>(); i++)</span><br><span class="line">        res += <span class="built_in">dfs</span>(ver[x][i]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ver.<span class="built_in">clear</span>();</span><br><span class="line">    ver.<span class="built_in">resize</span>(v + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> temp, t1;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; temp &amp;&amp; temp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (cin &gt;&gt; t1 &amp;&amp; t1)</span><br><span class="line">            ver[temp].<span class="built_in">emplace_back</span>(t1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        vis.<span class="built_in">clear</span>();</span><br><span class="line">        vis.<span class="built_in">resize</span>(v + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        cin &gt;&gt; temp;</span><br><span class="line">        cout &lt;&lt; v + <span class="number">1</span> - <span class="built_in">dfs</span>(temp, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= v; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[j] == <span class="number">0</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; j;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; v &amp;&amp; v)</span><br><span class="line">        <span class="built_in">solve</span>(v);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="UVA-614"><a href="#UVA-614" class="headerlink" title="UVA - 614"></a>UVA - 614</h4><p>HAVE TO USE <code>setw</code>. (very important!!!)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  template</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Ryan Kert on 2022/10/22.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fast                      \</span></span><br><span class="line"><span class="meta">    ios_base::sync_with_stdio(0); \</span></span><br><span class="line"><span class="meta">    cin.tie(0);                   \</span></span><br><span class="line"><span class="meta">    cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(x) x.begin(), x.end()</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> r[<span class="number">6</span>];</span><br><span class="line"><span class="type">int</span> m[<span class="number">12</span>][<span class="number">12</span>];</span><br><span class="line"><span class="type">int</span> vis[<span class="number">12</span>][<span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;+&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r[<span class="number">1</span>]; i++)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;---+&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r[<span class="number">0</span>]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;|&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; r[<span class="number">1</span>]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[i][j] == <span class="number">0</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;   &quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (vis[i][j] == <span class="number">-1</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;???&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (vis[i][j] &gt; <span class="number">0</span>)</span><br><span class="line">                cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">3</span>) &lt;&lt; vis[i][j];</span><br><span class="line">            <span class="keyword">if</span> (m[i][j] % <span class="number">2</span> == <span class="number">1</span> || j + <span class="number">1</span> == r[<span class="number">1</span>])</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;|&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n+&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; r[<span class="number">1</span>]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m[i][j] &gt; <span class="number">1</span> || i + <span class="number">1</span> == r[<span class="number">0</span>])</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;---+&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;   +&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> ind)</span> <span class="comment">// x : row, y : col</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x][y] != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    vis[x][y] = ind++;</span><br><span class="line">    <span class="keyword">if</span> (x == r[<span class="number">4</span>] &amp;&amp; y == r[<span class="number">5</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y &gt; <span class="number">0</span> &amp;&amp; m[x][y - <span class="number">1</span>] % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">// left</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(x, y - <span class="number">1</span>, ind))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; m[x - <span class="number">1</span>][y] &lt; <span class="number">2</span>) <span class="comment">// up</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(x - <span class="number">1</span>, y, ind))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (y + <span class="number">1</span> &lt; r[<span class="number">1</span>] &amp;&amp; m[x][y] % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">// right</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(x, y + <span class="number">1</span>, ind))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (x + <span class="number">1</span> &lt; r[<span class="number">0</span>] &amp;&amp; m[x][y] &lt; <span class="number">2</span>) <span class="comment">// down</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(x + <span class="number">1</span>, y, ind))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    vis[x][y] = <span class="number">-1</span>;</span><br><span class="line">    ind--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r[<span class="number">0</span>]; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; r[<span class="number">1</span>]; j++)</span><br><span class="line">            cin &gt;&gt; m[i][j];</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">        r[i]--;</span><br><span class="line">    <span class="built_in">dfs</span>(r[<span class="number">2</span>], r[<span class="number">3</span>], <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">draw</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fast;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; r[<span class="number">0</span>] &gt;&gt; r[<span class="number">1</span>] &gt;&gt; r[<span class="number">2</span>] &gt;&gt; r[<span class="number">3</span>] &gt;&gt; r[<span class="number">4</span>] &gt;&gt; r[<span class="number">5</span>] &amp;&amp; r[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Maze &quot;</span> &lt;&lt; cnt++ &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="UVA-12442-Forwarding-Emails"><a href="#UVA-12442-Forwarding-Emails" class="headerlink" title="UVA - 12442 Forwarding Emails"></a>UVA - 12442 Forwarding Emails</h4><p>brute force &#x3D; TLE<br>Therefore, we think that if we had traveled the vertex before, we don’t have to travel it again, since if it has been traversed, the traveler is definitely possessed greater reachable person.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  template</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Ryan Kert on 2022/10/22.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fast                      \</span></span><br><span class="line"><span class="meta">    ios_base::sync_with_stdio(0); \</span></span><br><span class="line"><span class="meta">    cin.tie(0);                   \</span></span><br><span class="line"><span class="meta">    cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(x) x.begin(), x.end()</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> v[<span class="number">50001</span>];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">50001</span>], dfsV[<span class="number">50001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dfsV[i])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    vis[i] = dfsV[i] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">dfs</span>(v[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(v, <span class="number">0</span>, m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ind;</span><br><span class="line">        cin &gt;&gt; ind;</span><br><span class="line">        cin &gt;&gt; v[ind];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, idx;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(dfsV, <span class="literal">false</span>, m + <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> temp = <span class="built_in">dfs</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (res &lt; temp)</span><br><span class="line">            &#123;</span><br><span class="line">                res = temp;</span><br><span class="line">                idx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; idx &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fast;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>DFS Algorithms - Flood-fill</title>
    <url>/2022/12/08/data_structure/flood-fill/</url>
    <content><![CDATA[<h2 id="UVA"><a href="#UVA" class="headerlink" title="UVA -"></a>UVA -</h2>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
</search>
