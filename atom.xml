<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ryan&#39;s blog</title>
  
  
  <link href="https://blog.ryankert.cc/atom.xml" rel="self"/>
  
  <link href="https://blog.ryankert.cc/"/>
  <updated>2022-07-23T07:22:32.949Z</updated>
  <id>https://blog.ryankert.cc/</id>
  
  <author>
    <name>Ryan Kert</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello Hexo!</title>
    <link href="https://blog.ryankert.cc/2022/07/23/hello-world/"/>
    <id>https://blog.ryankert.cc/2022/07/23/hello-world/</id>
    <published>2022-07-23T07:22:32.949Z</published>
    <updated>2022-07-23T07:22:32.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hi"><a href="#Hi" class="headerlink" title="Hi"></a>Hi</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hi&quot;&gt;&lt;a href=&quot;#Hi&quot; class=&quot;headerlink&quot; title=&quot;Hi&quot;&gt;&lt;/a&gt;Hi&lt;/h1&gt;</summary>
      
    
    
    
    <category term="cat1" scheme="https://blog.ryankert.cc/categories/cat1/"/>
    
    
    <category term="tag1" scheme="https://blog.ryankert.cc/tags/tag1/"/>
    
  </entry>
  
  <entry>
    <title>Youtube Thumbnail Scraping</title>
    <link href="https://blog.ryankert.cc/2022/04/20/youtube-thumbnail-scraping/"/>
    <id>https://blog.ryankert.cc/2022/04/20/youtube-thumbnail-scraping/</id>
    <published>2022-04-20T20:46:25.000Z</published>
    <updated>2022-07-23T07:22:32.949Z</updated>
    
    <content type="html"><![CDATA[<p>To crawl thumbnails on YouTube, we use a interesting website that YouTube made for us for quick request for thumnail image.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://i.ytimg.com/vi/&#123;YouTube_video_id&#125;/maxresdefault.jpg</span><br></pre></td></tr></table></figure><p>Firstly, we convert YouTube url to id by following code, and use “get” methed request the image.</p><p>Then, we stored the image in folder you like<br>using <code>imagedown(YouTube_video_id, &#39;folder_name&#39;)</code></p><p>If there’s no such folder, then it will auto generate a new one.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#urls to id</span></span><br><span class="line">url = <span class="string">&quot;YouTube URL&quot;</span></span><br><span class="line">exp = <span class="string">&quot;^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&amp;?]*).*&quot;</span></span><br><span class="line">s = re.findall(exp,url)[<span class="number">0</span>][-<span class="number">1</span>]</span><br><span class="line">thumbnail = <span class="string">f&quot;https://i.ytimg.com/vi/<span class="subst">&#123;s&#125;</span>/maxresdefault.jpg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#image scraping</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imagedown</span>(<span class="params">url, folder</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.mkdir(os.path.join(os.getcwd(), folder))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    os.chdir(os.path.join(os.getcwd(), folder))</span><br><span class="line"></span><br><span class="line">    name = url</span><br><span class="line">    link = url</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;-&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        im = requests.get(link)</span><br><span class="line">        f.write(im.content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Writing: &#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">imagedown(thumbnail, <span class="string">&#x27;image&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Credits: <a href="https://stackoverflow.com/questions/47730259/installing-urllib-in-python3-6">StackoverFlow</a> and <a href="https://github.com/jhnwr">jhnwr</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;To crawl thumbnails on YouTube, we use a interesting website that YouTube made for us for quick request for thumnail image.&lt;/p&gt;
&lt;figure c</summary>
      
    
    
    
    <category term="Scraping" scheme="https://blog.ryankert.cc/categories/Scraping/"/>
    
    
    <category term="Scraping" scheme="https://blog.ryankert.cc/tags/Scraping/"/>
    
  </entry>
  
  <entry>
    <title>Download Google font and use it in offline html</title>
    <link href="https://blog.ryankert.cc/2022/04/18/google-font-offline/"/>
    <id>https://blog.ryankert.cc/2022/04/18/google-font-offline/</id>
    <published>2022-04-18T20:46:25.000Z</published>
    <updated>2022-07-23T07:22:32.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Download-Google-font-and-use-it-in-offline-html"><a href="#Download-Google-font-and-use-it-in-offline-html" class="headerlink" title="Download Google font and use it in offline html"></a>Download Google font and use it in offline html</h2><p><strong>Steps required</strong></p><ol><li>find your beloved font at google fonts.</li><li>select all font styles that you might want to have.</li><li>find its’ url ex:<code>https://fonts.googleapis.com/css2?family=Caveat:wght@400;500;600;700&amp;display=swap</code>, which will be in<code>To embed a font, copy the code into the &lt;head&gt; of your html</code>&#x2F;<code>&lt;link&gt;</code></li><li>open it in the browser and convert it to <code>example.css</code></li><li>make a directory “fonts” ex:<code>mkdir fonts</code></li><li>make a <code>main.py</code> in same directory.</li><li>paste the automate python code in it.</li><li>comfirm that this directory has three object:<ul><li><input disabled="" type="checkbox"> <code>main.py</code></li><li><input disabled="" type="checkbox"> empty directory <code>fonts</code></li><li><input disabled="" type="checkbox"> <code>example.css</code></li></ul></li><li>run the python code <code>python main.py</code></li><li>embed <code>example.css</code> in your html file</li></ol><p><strong><code>main.py</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example.css&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = f.read()</span><br><span class="line">    urls = re.findall(<span class="string">r&#x27;(https?://[^\)]+)&#x27;</span>, text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    filename = url.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./fonts/&quot;</span> + filename, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.content)</span><br><span class="line">    text = text.replace(url, <span class="string">&quot;&#x27;./fonts/&quot;</span> + filename +<span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example.css&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(text)</span><br></pre></td></tr></table></figure><p>credit: <strong>duydb</strong>, <strong>Wytamma Wirth</strong> and <strong>me</strong> who modified it to the better</p><p>resourse: <a href="https://stackoverflow.com/questions/15930003/downloading-a-google-font-and-setting-up-an-offline-site-that-uses-it">https://stackoverflow.com/questions/15930003/downloading-a-google-font-and-setting-up-an-offline-site-that-uses-it</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Download-Google-font-and-use-it-in-offline-html&quot;&gt;&lt;a href=&quot;#Download-Google-font-and-use-it-in-offline-html&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="google-font" scheme="https://blog.ryankert.cc/categories/google-font/"/>
    
    
    <category term="google-font" scheme="https://blog.ryankert.cc/tags/google-font/"/>
    
  </entry>
  
</feed>
